name: Build and Release on Tag
env:
  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
on:
  push:
    tags:
      - "v*"

permissions:
  contents: write
  packages: write

jobs:
  build:
    name: Build on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            dist_cmd: npm run dist:linux
            artifact_name: linux
          - os: macos-latest
            dist_cmd: npm run dist:mac
            artifact_name: macos
          - os: windows-latest
            dist_cmd: npm run dist:win
            artifact_name: windows

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Use Node.js 18
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Ensure 512px icon exists (cross-platform, uses sharp)
        shell: bash
        run: |
          set -e
          ICON_SRC=assets/icon-256.png
          ICON_DST=assets/icon-512.png
          if [ -f "$ICON_DST" ]; then
            echo "$ICON_DST already exists"
            exit 0
          fi
          if [ ! -f "$ICON_SRC" ]; then
            echo "Source icon not found: $ICON_SRC" >&2
            exit 1
          fi
          if [ "${{ matrix.os }}" = "macos-latest" ]; then
            echo "Using sips on macOS to generate 512 icon"
            if command -v sips >/dev/null 2>&1; then
              sips -Z 512 "$ICON_SRC" --out "$ICON_DST"
            else
              echo "sips not found, falling back to sharp"
              npm i --no-save sharp
              node -e "require('sharp')(process.env.ICON_SRC).resize(512,512).toFile(process.env.ICON_DST).then(()=>console.log('created')).catch(err=>{console.error(err); process.exit(1)})" \
                ICON_SRC="$ICON_SRC" ICON_DST="$ICON_DST"
            fi
          else
            echo "Using sharp to generate 512 icon"
            npm i --no-save sharp
            node -e "require('sharp')(process.env.ICON_SRC).resize(512,512).toFile(process.env.ICON_DST).then(()=>console.log('created')).catch(err=>{console.error(err); process.exit(1)})" \
              ICON_SRC="$ICON_SRC" ICON_DST="$ICON_DST"
          fi

      - name: Point electron-builder to 512px icon (CI-only)
        run: |
          node -e "const fs=require('fs'); const p=require('./package.json'); p.build = p.build || {}; if(process.env.RUNNER_OS==='macOS'){p.build.icon='assets/icon.icns'}else{p.build.icon='assets/icon-512.png'}; fs.writeFileSync('package.json', JSON.stringify(p, null, 2)); console.log('updated package.json build.icon ->', p.build.icon)"

      - name: Generate mac .icns (macOS only)
        if: runner.os == 'macOS'
        run: |
          set -e
          ICON_SRC=assets/icon-512.png
          ICONSET_DIR=assets/icon.iconset
          ICON_OUT=assets/icon.icns
          if [ -f "$ICON_OUT" ]; then
            echo "$ICON_OUT already exists"
            exit 0
          fi
          if [ ! -f "$ICON_SRC" ]; then
            echo "Source 512 png not found: $ICON_SRC" >&2
            exit 1
          fi
          mkdir -p "$ICONSET_DIR"
          sips -z 16 16 "$ICON_SRC" --out "$ICONSET_DIR/icon_16x16.png"
          sips -z 32 32 "$ICON_SRC" --out "$ICONSET_DIR/icon_16x16@2x.png"
          sips -z 32 32 "$ICON_SRC" --out "$ICONSET_DIR/icon_32x32.png"
          sips -z 64 64 "$ICON_SRC" --out "$ICONSET_DIR/icon_32x32@2x.png"
          sips -z 64 64 "$ICON_SRC" --out "$ICONSET_DIR/icon_64x64.png"
          sips -z 128 128 "$ICON_SRC" --out "$ICONSET_DIR/icon_64x64@2x.png"
          sips -z 128 128 "$ICON_SRC" --out "$ICONSET_DIR/icon_128x128.png"
          sips -z 256 256 "$ICON_SRC" --out "$ICONSET_DIR/icon_128x128@2x.png"
          sips -z 256 256 "$ICON_SRC" --out "$ICONSET_DIR/icon_256x256.png"
          sips -z 512 512 "$ICON_SRC" --out "$ICONSET_DIR/icon_256x256@2x.png"
          sips -z 512 512 "$ICON_SRC" --out "$ICONSET_DIR/icon_512x512.png"
          sips -z 1024 1024 "$ICON_SRC" --out "$ICONSET_DIR/icon_512x512@2x.png"
          iconutil -c icns "$ICONSET_DIR" -o "$ICON_OUT"
          echo "Generated $ICON_OUT"

      - name: Build renderer (vite)
        run: npm run build

      - name: Build Electron app
        run: ${{ matrix.dist_cmd }}

      - name: Show build output
        run: |
          node -e 'const fs=require("fs"), path=require("path"); const dir="dist-electron"; console.log("Contents of "+dir+":"); try{ for(const name of fs.readdirSync(dir)) console.log(name); }catch(e){ console.log(dir+" not found"); } console.log("Find artifacts:"); function walk(d,depth){ if(depth<0) return; try{ for(const it of fs.readdirSync(d,{withFileTypes:true})){ const p=path.join(d,it.name); if(it.isFile()) console.log(p); else if(it.isDirectory()) walk(p,depth-1); } }catch(e){} } walk(dir,2);'

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: clipboard-god-${{ github.ref_name }}-${{ matrix.artifact_name }}
          path: dist-electron/

  publish:
    name: Create GitHub Release
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download linux artifact
        uses: actions/download-artifact@v4
        with:
          name: clipboard-god-${{ github.ref_name }}-linux
          path: artifacts/linux

      - name: Download mac artifact
        uses: actions/download-artifact@v4
        with:
          name: clipboard-god-${{ github.ref_name }}-macos
          path: artifacts/macos
          continue-on-error: true

      - name: Download windows artifact
        uses: actions/download-artifact@v4
        with:
          name: clipboard-god-${{ github.ref_name }}-windows
          path: artifacts/windows
          continue-on-error: true

      - name: Collect release assets
        run: |
          mkdir -p release-assets
          echo "Looking for known package types to include in the release"
          find artifacts -type f \( -iname "*.deb" -o -iname "*.AppImage" -o -iname "*.dmg" -o -iname "*.exe" -o -iname "*.msi" -o -iname "*.zip" \) -print -exec cp {} release-assets/ \;
          echo "Release assets:" && ls -la release-assets || true

      - name: Create GitHub Release
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ github.ref_name }}
          name: ${{ github.ref_name }}
          token: ${{ secrets.GITHUB_TOKEN }}
          files: |
            release-assets/**